#+TITLE: emacs config
#+AUTHOR: Paul Davis
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* Configuration

** Init

   First, make sure this file will compile itself into a ~.el~ file
   that emacs can load. The repo's existing ~init.el~ will bootstrap
   this and replace itself in the process

   #+BEGIN_SRC emacs-lisp
     (defun tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "init.org")))
         ;; Avoid running hooks when tangling.
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           (byte-compile-file (concat user-emacs-directory "init.el")))))

     (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   Inhibit the startup message

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

   Set up package repos and ~use-package~

   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
     (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
     (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
     ;; use-package should have these loaded
     (require 'diminish)
     (require 'bind-key)
   #+END_SRC

   Disable lock files

   #+BEGIN_SRC emacs-lisp
     (setq-default create-lockfiles nil)
   #+END_SRC

   Adjust backup file settings to be in a separate directory

   #+BEGIN_SRC emacs-lisp
     (defvar backup-directory
       (expand-file-name "tmp/backups" user-emacs-directory)
       "Where backups go.")
     (defvar autosave-directory
       (expand-file-name "tmp/autosave" user-emacs-directory)
       "Where autosaves go.")
     (make-directory backup-directory t)
     (make-directory autosave-directory  t)
     (setq backup-by-copying t
           backup-directory-alist `((".*" .  ,backup-directory))
           auto-save-file-name-transforms `((".*"  ,autosave-directory t))
           auto-save-list-file-prefix  autosave-directory
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)
   #+END_SRC

   Remove menu bars and scroll bars

   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC

   Set the font

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(font . "Ubuntu Mono-10"))
   #+END_SRC

   Auto revert when file on disk changes

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)
   #+END_SRC

   Setup custom file

   #+BEGIN_SRC emacs-lisp
     (defvar custom-file-location
       (expand-file-name "custom.el" user-emacs-directory)
       "File for customizations via \\[customize].")

     (setq custom-file custom-file-location)
     (if (file-readable-p custom-file-location)
         (progn
           (load custom-file)))
   #+END_SRC


   Change the garbage collector thresholds

   Activate sub word mode

   #+BEGIN_SRC emacs-lisp
     (global-subword-mode)
     (diminish 'global-subword-mode)
   #+END_SRC

** Basic Packages

*** Dired

    #+BEGIN_SRC emacs-lisp
      (use-package dired
        :config
        (setq dired-listing-switches "-lha --group-directories-first"))
    #+END_SRC

*** Uniquify

    #+BEGIN_SRC emacs-lisp
      (use-package uniquify
        :config
        (customize-set-variable 'uniquify-buffer-name-style 'forward))
    #+END_SRC

*** Zenburn

    Set the alist first so that we can override some color they use in
    the theme, namely a darker background and added shades

    #+BEGIN_SRC emacs-lisp
       (defvar zenburn-colors-alist
           '(("zenburn-fg+1"     . "#FFFFEF")
             ("zenburn-fg"       . "#DCDCCC")
             ("zenburn-fg-1"     . "#656555")
             ("zenburn-bg-2"     . "#000000")
             ("zenburn-bg-1"     . "#0C0C0C")
             ("zenburn-bg-05"    . "#121212")
             ("zenburn-bg"       . "#1C1C1C")
             ("zenburn-bg+05"    . "#222222")
             ("zenburn-bg+1"     . "#2C2C2C")
             ("zenburn-bg+2"     . "#3C3C3C")
             ("zenburn-bg+3"     . "#4C4C4C")
             ("zenburn-red+1"    . "#DCA3A3")
             ("zenburn-red"      . "#CC9393")
             ("zenburn-red-1"    . "#BC8383")
             ("zenburn-red-2"    . "#AC7373")
             ("zenburn-red-3"    . "#9C6363")
             ("zenburn-red-4"    . "#8C5353")
             ("zenburn-orange"   . "#DFAF8F")
             ("zenburn-yellow"   . "#F0DFAF")
             ("zenburn-yellow-1" . "#E0CF9F")
             ("zenburn-yellow-2" . "#D0BF8F")
             ("zenburn-yellow-4" . "#B09F6F")
             ("zenburn-green-2"  . "#4F6F4F")
             ("zenburn-green-1"  . "#5F7F5F")
             ("zenburn-green"    . "#7F9F7F")
             ("zenburn-green+1"  . "#8FB28F")
             ("zenburn-green+2"  . "#9FC59F")
             ("zenburn-green+3"  . "#AFD8AF")
             ("zenburn-green+4"  . "#BFEBBF")
             ("zenburn-cyan"     . "#93E0E3")
             ("zenburn-blue+1"   . "#94BFF3")
             ("zenburn-blue"     . "#8CD0D3")
             ("zenburn-blue-1"   . "#7CB8BB")
             ("zenburn-blue-2"   . "#6CA0A3")
             ("zenburn-blue-3"   . "#5C888B")
             ("zenburn-blue-4"   . "#4C7073")
             ("zenburn-blue-5"   . "#366060")
             ("zenburn-magenta"  . "#DC8CC3"))
           "List of Zenburn colors.
      Each element has the form (NAME . HEX).

      `+N' suffixes indicate a color is lighter.
      `-N' suffixes indicate a color is darker.

      This overrides the colors provided by the `zenburn-theme' package.")

    #+END_SRC

    Then set up the configuration for the theme, mostly custom colors
    for various other packages and the header/footer lines

    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
        :ensure t
        :config
        (load-theme 'zenburn t)


        ;; default face customizations
        (zenburn-with-color-variables
          ;; darker region selection
          (set-face-attribute 'region nil :background zenburn-bg-2)
          ;; flat mode and header lines
          (set-face-attribute 'header-line nil :background zenburn-bg+1 :box nil)
          (set-face-attribute 'mode-line nil :background zenburn-bg+1 :box nil)
          (set-face-attribute 'mode-line-inactive nil :foreground zenburn-bg+3 :background zenburn-bg+05 :box nil)
          ;; italic comments
          (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
          ;; set the verticle border color
          (set-face-attribute 'vertical-border nil :foreground zenburn-bg-1))

        ;; powerline colors
        (with-eval-after-load 'powerline
          (zenburn-with-color-variables
            (set-face-attribute 'powerline-active1 nil :background zenburn-bg+05 :foreground zenburn-green+1)
            (set-face-attribute 'powerline-active2 nil :background zenburn-bg+1 :foreground zenburn-green+1)
            (set-face-attribute 'powerline-inactive1 nil :background zenburn-bg+05 :foreground zenburn-bg+3)
            (set-face-attribute 'powerline-inactive2 nil :background zenburn-bg+05 :foreground zenburn-bg+3)))

        ;; flycheck use straight underline instead of wave
        (with-eval-after-load 'flycheck
          (zenburn-with-color-variables
            (set-face-attribute 'flycheck-error nil :underline `(:style line :color ,zenburn-red-1))
            (set-face-attribute 'flycheck-warning nil :underline `(:style line :color ,zenburn-yellow-2))
            (set-face-attribute 'flycheck-info nil :underline `(:style line :color ,zenburn-blue-2))))

        ;; helm faces
        (with-eval-after-load 'helm
          (zenburn-with-color-variables
            (set-face-attribute 'helm-source-header nil :background zenburn-bg+2 :height 1.3 :box '(:style nil))
            (set-face-attribute 'helm-selection nil :background zenburn-bg+2 :weight 'bold)))
        (with-eval-after-load 'helm-utils
          (zenburn-with-color-variables
            (set-face-attribute 'helm-selection-line nil :background zenburn-bg+2)))

        ;; faces for ledger mode
        (with-eval-after-load 'ledger-mode
          (zenburn-with-color-variables
            (set-face-attribute 'ledger-font-auto-xact-face nil :foreground zenburn-yellow)
            (set-face-attribute 'ledger-font-periodic-xact-face nil :foreground zenburn-green+3)
            (set-face-attribute 'ledger-font-xact-cleared-face nil :foreground zenburn-fg)
            (set-face-attribute 'ledger-font-xact-pending-face nil :foreground zenburn-yellow-2)
            ;; (set-face-attribute 'ledger-font-xact-open-face nil :foreground zenburn-bg-1)
            (set-face-attribute 'ledger-font-payee-uncleared-face nil :foreground zenburn-fg-1)
            (set-face-attribute 'ledger-font-payee-pending-face nil :foreground zenburn-yellow-2)
            (set-face-attribute 'ledger-font-pending-face nil :foreground zenburn-yellow-2)
            (set-face-attribute 'ledger-font-other-face nil :foreground zenburn-blue-1)
            (set-face-attribute 'ledger-font-posting-account-face nil :foreground zenburn-blue-3 )
            (set-face-attribute 'ledger-font-posting-amount-face nil :foreground zenburn-green+4 )
            (set-face-attribute 'ledger-font-posting-date-face nil :foreground zenburn-orange :underline t)
            (set-face-attribute 'ledger-font-report-clickable-face nil :foreground zenburn-fg+1)))

        ;; faces for avy
        (with-eval-after-load 'avy
          (zenburn-with-color-variables
            (set-face-attribute 'avy-background-face nil :foreground zenburn-fg-1 :background zenburn-bg-1)
            (set-face-attribute 'avy-lead-face-0 nil :foreground zenburn-fg+1 :background zenburn-blue-5)
            (set-face-attribute 'avy-lead-face-1 nil :foreground zenburn-fg+1 :background zenburn-bg-2)
            (set-face-attribute 'avy-lead-face-2 nil :foreground zenburn-fg+1 :background zenburn-blue-4)
            (set-face-attribute 'avy-lead-face nil :foreground zenburn-fg+1 :background zenburn-red-4))))
    #+END_SRC

*** Magit

    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t
        :pin melpa-stable
        :config
        (setq magit-merge-arguments '("--no-ff"))

        (defvar my-git-command-map
          (let ((map (make-sparse-keymap)))
            (define-key map "g" 'magit-status)
            (define-key map (kbd "C-g") 'magit-status)
            (define-key map "l" 'magit-log)
            (define-key map "f" 'magit-fetch-current)
            (define-key map "h" 'helm-git-files)
            (define-key map "!" 'magit-blame-mode)
            (define-key map "c" 'magit-checkout)
            (define-key map (kbd "C-r") 'magit-rebase-step)
            (define-key map (kbd "C-f") 'magit-pull)
            (define-key map (kbd "C-p") 'magit-push)
            (define-key map (kbd "z z") 'magit-stash)
            (define-key map (kbd "z p") 'magit-stash-pop)
            (define-key map (kbd "C-t") 'git-timemachine)
            (define-key map (kbd "C-c") 'magit-create-branch)
            map)
          "Keymap of commands to load magit.")

        (define-key global-map (kbd "C-c g") my-git-command-map)
        (define-key global-map (kbd "C-c C-g") my-git-command-map))
    #+END_SRC

*** Helm

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :pin melpa-stable
        :diminish helm-mode
        :bind (("C-c h" . helm-command-prefix)
               ("M-x" . helm-M-x)
               ("M-y" . helm-show-kill-ring)
               ("C-x b" . helm-mini)
               ("C-x C-b" . helm-mini)
               ("C-x C-f" . helm-find-files)
               :map helm-map
               (([tab] . helm-execute-persistent-action)
                "C-z" . helm-select-action))
        :config
        (when (executable-find "curl")
          (setq helm-net-prefer-curl t))
        
        (setq helm-quick-update                     t ; do not display invisible candidates
              helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
              helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
              helm-M-x-fuzzy-match                  t ; fuzzy match M-x
              helm-recentf-fuzzy-match              t ; fuzzy match recent files
              helm-bookmark-show-location           t
              helm-completion-in-region-fuzzy-match t
              helm-file-cache-fuzzy-match           t
              helm-imenu-fuzzy-match                t
              helm-mode-fuzzy-match                 t
              helm-locate-fuzzy-match               t
              helm-quick-update                     t
              helm-semantic-fuzzy-match             t
              helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
              helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
              helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
              helm-ff-file-name-history-use-recentf t)
        
        (setq helm-split-window-in-side-p t)
        (setq helm-autoresize-max-height 25)
        (setq helm-autoresize-min-height 25)
        
        (helm-mode 1))

    #+END_SRC





;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:

